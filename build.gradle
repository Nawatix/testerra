plugins {
    id 'com.github.jk1.dependency-license-report' version '1.13'
    id "com.jfrog.bintray" version "1.8.5"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish' // tasks publish and publishToMavenLocal

ext {
    /*
    module stuff
     */
    core_interop = project(':core-interop')
    driver_ui = project(':driver-ui')
    driver_ui_desktop = project(':driver-ui-desktop')
    image_processing = project(':image-processing')
    core = project(':core')

    seleniumVersion = '3.141.59'
    /*
    Flags
     */
    doNotPublish = this.&dnp

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

def dnp(prj) {
    prj.jar.enabled = true
    prj.publish.enabled = false
    prj.publishToMavenLocal.enabled = false

    println("Do not publish stuff from " + prj)
}

allprojects {
    group 'eu.tsystems.mms.tic.testerra'
//    version '1-SNAPSHOT'
    version '0.4b'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish' // tasks publish and publishToMavenLocal
//    apply plugin: 'com.jfrog.bintray'

    // important!
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    // custom tasks for creating source/javadoc jars
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    // add source jar tasks as artifacts
    artifacts {
        archives sourcesJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
            }
        }

        repositories {
            maven {
                url System.getProperty("deployUrl", "none")
                credentials {
                    username System.getProperty("deployUsername", "none")
                    password System.getProperty("deployPassword", "none")
                }
            }
        }
    }

    tasks.whenTaskAdded { t ->
        if (t.name.startsWith("publish")) {
            boolean e = t.project.publish.enabled
            if (!e) {
                println "Not running publish for " + t.project.name
                t.enabled = false
            }
        }
    }

    test {
        ignoreFailures = true
        useTestNG()
        testLogging {
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
        options {
            systemProperties(System.getProperties())
        }
    }

//    bintray {
////        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
////        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
//        user = 'martingrossmann'
//        key = 'db2299d555b009a15e55df970864ba3a72fc6df8'
//        publications = ['mavenJava'] //When uploading Maven-based publication files
//        dryRun = false //Whether to run this as dry-run, without deploying
//        publish = true //If version should be auto published after an upload
//
//        pkg {
//            repo = 'Testerra_Test'
//            desc = 'A Test automation framework'
//            name = project.getName()
//            websiteUrl = 'https://testerra.io'
//            issueTrackerUrl = 'https://github.com/T-Systems-MMS/testerra/issues'
//            licenses = allLicenses
//            vcsUrl = 'https://github.com/T-Systems-MMS/testerra.git'
//            labels = ['java', 'test', 'testautomation', 'framework']
//            publicDownloadNumbers = true
////            attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
//            version {
//                name = project.getVersion()
//                desc = 'Testerra Pre-release'
////                released  = 'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
////                vcsTag = '1.3.0'
////                attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
////                gpg {
////                    sign = true //Determines whether to GPG sign the files. The default is false
////                    passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
////                }
////                mavenCentralSync {
////                    sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
////                    user = 'userToken' //OSS user token
////                    password = 'paasword' //OSS user password
////                    close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
////                }
//            }
//        }
//    }
}
