plugins {
    id 'com.github.jk1.dependency-license-report' version '1.13'
    id "com.jfrog.bintray" version "1.8.5"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish' // tasks publish and publishToMavenLocal

ext {
    /*
    module stuff
     */
    core_interop = project(':core-interop')
    driver_ui = project(':driver-ui')
    driver_ui_desktop = project(':driver-ui-desktop')
    image_processing = project(':image-processing')
    core = project(':core')

    seleniumVersion = '3.141.59'
    /*
    Flags
     */
    doNotPublish = this.&dnp

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]

    moduleVersion = '1-SNAPSHOT'
    if (System.properties.containsKey('ttVersion')) {
        moduleVersion = System.getProperty('ttVersion')
    }
}

def dnp(prj) {
    prj.jar.enabled = true
    prj.publish.enabled = false
    prj.publishToMavenLocal.enabled = false

    println("Do not publish stuff from " + prj)
}

allprojects {

    group 'eu.tsystems.mms.tic.testerra'
    version moduleVersion
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish' // tasks publish and publishToMavenLocal
    apply plugin: 'jacoco' // code-coverage

    // important!
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    jacoco {
        toolVersion = "0.8.5"
    }

    // custom tasks for creating source/javadoc jars
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    // add source jar tasks as artifacts
    artifacts {
        archives sourcesJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
            }
        }

        repositories {
            maven {
                url System.getProperty("deployUrl", "none")
                credentials {
                    username System.getProperty("deployUsername", "none")
                    password System.getProperty("deployPassword", "none")
                }
            }
        }
    }

    tasks.whenTaskAdded { t ->
        if (t.name.startsWith("publish")) {
            boolean e = t.project.publish.enabled
            if (!e) {
                println "Not running publish for " + t.project.name
                t.enabled = false
            }
        }
    }

    test {

        ignoreFailures = true
        useTestNG()
        testLogging {
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
        options {
            systemProperties(System.getProperties())
        }
    }
}

task jacocoAggregateReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {

    additionalSourceDirs(files(subprojects.sourceSets.main.allSource.srcDirs))

    def srcdirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    def classdirs = files(subprojects.sourceSets.main.output)
    sourceDirectories.setFrom(srcdirs)
    classDirectories.setFrom(classdirs)

//    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
//    classDirectories = files(subprojects.sourceSets.main.output)

    executionData.setFrom(project.fileTree(dir: '.', include: '**/build/jacoco/test.exec'))

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

task publishToBintray(type: GradleBuild) {
    tasks = [
            'core:bintrayUpload',
            'core-interop:bintrayUpload',
            'image-processing:bintrayUpload',
            'driver-ui:bintrayUpload',
            'driver-ui-desktop:bintrayUpload',
            'surefire-connector:bintrayUpload',
            'bmp:bintrayUpload',
            'console-connector:bintrayUpload',
            'db-connector:bintrayUpload',
            'mail-connector:bintrayUpload'
    ]
}
