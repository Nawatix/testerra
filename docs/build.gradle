plugins {
    id "org.asciidoctor.convert" version "2.3.0"
    id 'com.github.mgk.gradle.s3' version '1.4.0'
}

ext {
    sources = 'src'
    sourcesDoc = "${sources}/docs"
    destinationDir = 'build/docs'
    sourceDirForS3 = "${destinationDir}/html5"
    destDirS3 = 'testerra/latest'
}

import com.github.mgk.gradle.S3Upload

s3 {
    profile = 'tapas'
    bucket = 'tapas-docs'
}

asciidoctor {
    sourceDir = file("${sourcesDoc}")
    sources {
        include 'index.adoc'
    }
    resources {
        from("$sources") {
            include 'images/**', 'css/**', 'js/**', 'highlight/**'
        }
    }
    outputDir = file("$destinationDir")
    options doctype: 'book',
            backends: 'html5'

    attributes docinfo: 'shared',
            toc: 'left',
            toclevels: 2,
            sectnums: '',
            sectanchors: '',
            Author: 'The Testerra Team of T-Systems Multimedia Solutions GmbH',
            revnumber: "${version}",
            'source-highlighter': 'highlightjs',
            'highlightjs-theme': 'atom-one-light',
            highlightjsdir: 'highlight',
            icons: 'font',
            imagesdir: 'images'
}

task publishDoc() {
    dependsOn asciidoctor

    doLast {
        def dir = file("${sourceDirForS3}")

        fileTree(dir: dir).each { f ->
            def path = dir.toPath().relativize(f.toPath())
            def t = task "upload-${path}"(type: S3Upload) {
                file = f
                key = "${destDirS3}/${path}"
                overwrite = true
            }
            t.execute()
        }
    }
}
